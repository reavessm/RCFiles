"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Stephen Reaves' VsVim Runtime Configuration                                 "
" To use on Windoze, save this file to "C:\Users\<username>\_vimrc            "
" NOTE: Remove the '.txt' extension or this will not be sourced automatically "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Display line numbers to the left
set number

" Complete enclosures
" Allman brace style
inoremap {{ <CR>{<CR>}<Esc>ko
"inoremap {{ {<CR>}<Esc>ko               " K&R brace style
"inoremap {{ <CR><Tab>{<CR><Tab>}<Esc>ko " GNU + Brace style
inoremap (( ()<++><Esc>F)i
inoremap [[ []<++><Esc>F]i

" Complete for loops etc.
" Keywords are intentionally mispelled to allow for typing those words in documentation
" Allman brace style
inoremap iff if ()<CR>{<CR><++><CR>}<Esc>3k0f(a
"inoremap iff if () {<CR> /*<++>*/ <CR>}<Esc>3k0f(a              " K&R brace style
"inoremap iff if ()<CR><Tab>{<CR> /*<++>*/ <CR><Tab>}<Esc>3k0f(a " GNU + brace style

" Allman brace style
inoremap eliff if ()<CR>{<CR><++><CR>}<CR>else if (<++>)<CR>{<CR><++><CR>}<Esc>7k0f(a
"inoremap eliff if () {<CR>/*<++>*/<CR>}<CR>else if ( /*<++>*/ ) {<CR> /*<++>*/ <CR>}<Esc>7k0f(a                           " K&R brace style
"inoremap eliff if ()<CR><Tab>{<CR>/*<++>*/<CR><tab>}<CR>else if ( /*<++>*/ )<CR><Tab>{<CR> /*<++>*/ <CR><Tab>}<Esc>7k0f(a " GNU + brace style

" Allman brace style
inoremap forr for (; <++>; <++>)<CR>{<CR><++><CR>}<Esc>3k0f(a
"inoremap forr for (; <++> ; <++> ) {<CR>/*<++>*/<CR>}<Esc>3k0f(a              " K&R brace style
"inoremap forr for (; /*<++>*/ ; /*<++>*/ )<CR><Tab>{<CR>/*<++>*/<CR><Tab>}<Esc>3k0f(a " GNU + brace style

" Allman brace style
inoremap whilee while ()<CR>{<CR><++><CR>}<Esc>3k0f(a
"inoremap whilee while () {<CR>/*<++>*/<CR>}<Esc>3k0f(a              " K&R brace style
"inoremap whilee while ()<CR><Tab>{<CR>/*<++>*/<CR><Tab>}<Esc>3k0f(a " GNU + brace style

" BHS Super Mega Ultra Proprietary Documentation Style Generator
inoremap remarks <Esc>:+1,+2s/ sender,/ _sender,/<CR>:-2s/"sender">/"_sender">Common table buffer/<CR>:+1,+2s/ e)/ _e)/<CR>:-1s/"e">/"_e">Args/<CR>i <remarks><CR>- Blue Horseshoe Solutions, Inc. - <++><CR><Esc>bkea<Space>

" Data contract member snippet
inoremap dcms <dcmsType> <dcmsName>;<CR><CR>// <summary><CR>// Parm method for <dcmsName><CR>// </summary><CR>// <param name = "_<dcmsName>">Value to set for <dcmsName></param><CR>// <returns>Value to get from <dcmsName></returns><CR>[DataMemberAttribute]<CR>public <dcmsType> <dcmsName>(<dcmsType> _<dcmsName> = <dcmsName>)<CR>{<CR><dcmsName> = _<dcmsName>;<CR><CR>return <dcmsName>;<CR>}<CR><Esc>13k:%s/<dcmsType>/
inoremap dcmcn <Esc>:%s/<dcmsName>/
inoremap dcmctc <Esc>:%s/<dcmsType>/
inoremap dcmcti <Esc>:%s/<dcmsType>/int/g | %s/<dcmsName>//g<Left><Left>
inoremap dcmcts <Esc>:%s/<dcmsType>/str/g | %s/<dcmsName>/

" Ctrl + l to move to next <++> tag
noremap <c-l> <Esc>/<++><CR>:noh<CR>ca<
inoremap <c-l> <Esc>/<++><CR>:noh<CR>ca<

" Ctr + h to move to prev <++> tag
noremap <c-h> <Esc>?<++><CR>:noh<CR>ca<
inoremap <c-h> <Esc>?<++><CR>:noh<CR>ca<

" Move lines up and down
nnoremap <c-j> ddp 
nnoremap <c-k> ddkP

" Create extension stuffs
nnoremap <c-e> I<CR><Esc>kI[ExtensionOf[<Esc>j0yiWk$paStr(<Esc>j$yiWk$pa)]<Esc>jIfinal <Esc>ggI<CR><Esc>kI